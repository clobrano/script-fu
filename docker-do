#!/usr/bin/env bash
# -*- coding: UTF-8 -*-
## Helper script for docker based build machines. The $HOME/workspace is mounted on docker machine under the same path
## (that must have been created first when building the docker image) and the CURRENT directory becomes the WORKING
## directory inside docker.
## usage: docker-do.sh [options]
## options:
##      -i, --image <docker_image>  The docker image to use
##      -c, --command <command>     Command to execute in docker env. Some commands are extended: e.g. "checkinstall acquires --backup=no --pgkversion=0 -y" flags
##      -s, --volumesrc <path>      Host volume to be mounted onto docker image [default: $HOME/workspace]
##      -d, --volumedst <path>      Docker image mount point [default: $HOME/workspace]
##      -b, --backup <value>        Checkinstall backup value (yes/no) [default: no]
##      -v, --pkgversion <version>  Checkinstall pkgversion value [default: 0]
##      -r                          Static code review during build using scan-build
# GENERATED_CODE: start
# Default values
_volumesrc=$PWD
_volumedst=$PWD
_backup=no
_pkgversion=0

# No-arguments is not allowed
[ $# -eq 0 ] && sed -ne 's/^## \(.*\)/\1/p' $0 && exit 1

# Converting long-options into short ones
for arg in "$@"; do
  shift
  case "$arg" in
"--image") set -- "$@" "-i";;
"--command") set -- "$@" "-c";;
"--volumesrc") set -- "$@" "-s";;
"--volumedst") set -- "$@" "-d";;
"--backup") set -- "$@" "-b";;
"--pkgversion") set -- "$@" "-v";;
  *) set -- "$@" "$arg"
  esac
done

function print_illegal() {
    echo Unexpected flag in command line \"$@\"
}

# Parsing flags and arguments
while getopts 'hri:c:s:d:b:v:' OPT; do
    case $OPT in
        h) sed -ne 's/^## \(.*\)/\1/p' $0
           exit 1 ;;
        r) _r=1 ;;
        i) _image=$OPTARG ;;
        c) _command=$OPTARG ;;
        s) _volumesrc=$OPTARG ;;
        d) _volumedst=$OPTARG ;;
        b) _backup=$OPTARG ;;
        v) _pkgversion=$OPTARG ;;
        \?) print_illegal $@ >&2;
            echo "---"
            sed -ne 's/^## \(.*\)/\1/p' $0
            exit 1
            ;;
    esac
done
# GENERATED_CODE: end

if [ -z "$_docker_image" ]; then
    cur=`pwd`
    _docker_image=`basename $cur`
    echo $_docker_image
fi

if [ ! -z "$_r" ] && [ "$_command" == "make" ]; then
    _command="scan-build make"
fi

if [ "$_command" == "checkinstall" ]; then
    _command="checkinstall --backup=$_backup --pkgversion=$_pkgversion -y"
fi

set -x
docker run --rm -v "$_volumesrc":"$_volumedst" -w "$_volumedst" -it "$_image" $_command

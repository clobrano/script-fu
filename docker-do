#!/usr/bin/env bash
# -*- coding: UTF-8 -*-
## Helper script for docker based build machines. The $HOME/workspace is mounted on docker machine under the same path
## (that must have been created first when building the docker image) and the CURRENT directory becomes the WORKING
## directory inside docker.
## usage: docker-do.sh [options]
## options:
##      -i, --image <docker_image>  The docker image to use
##      -b, --build                 Build and create a debian package (currently same as --command=make)
##      -p, --package               Create a debian package
##      -c, --command <command>     Command to execute in docker env
##      -s, --src <path>            Host volume to be mounted onto docker image [default: `pwd`]
##      -d, --dst <path>            Docker image mount point [default: `pwd`]

# GENERATED_CODE: start
# Default values
_src=`pwd`
_dst=`pwd`

# No-arguments is not allowed
[ $# -eq 0 ] && sed -ne 's/^## \(.*\)/\1/p' $0 && exit 1

# Converting long-options into short ones
for arg in "$@"; do
  shift
  case "$arg" in
"--image") set -- "$@" "-i";;
"--build") set -- "$@" "-b";;
"--package") set -- "$@" "-p";;
"--command") set -- "$@" "-c";;
"--src") set -- "$@" "-s";;
"--dst") set -- "$@" "-d";;
  *) set -- "$@" "$arg"
  esac
done

function print_illegal() {
    echo Unexpected flag in command line \"$@\"
}

# Parsing flags and arguments
while getopts 'hbpi:c:s:d:' OPT; do
    case $OPT in
        h) sed -ne 's/^## \(.*\)/\1/p' $0
           exit 1 ;;
        b) _build=1 ;;
        p) _package=1 ;;
        i) _image=$OPTARG ;;
        c) _command=$OPTARG ;;
        s) _src=$OPTARG ;;
        d) _dst=$OPTARG ;;
        \?) print_illegal $@ >&2;
            echo "---"
            sed -ne 's/^## \(.*\)/\1/p' $0
            exit 1
            ;;
    esac
done
# GENERATED_CODE: end

if [ -z "$_image" ]; then
    cur=`pwd`
    _image=`basename $cur`
    echo Looking for [$_image] as docker image
    # TODO check whether the docker image actually exists before going forward
fi

DOCKER_RUN="docker run --rm -v $_src:$_dst -w $_dst -it $_image"
[ ! -z $_command ] && set -x && exec $DOCKER_RUN $_command
[ ! -z $_build ]   && set -x && exec $DOCKER_RUN make
[ ! -z $_package ] && set -x && exec $DOCKER_RUN fpm -s dir -t deb -n $_image ./
